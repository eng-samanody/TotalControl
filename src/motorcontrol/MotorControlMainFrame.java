/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package motorcontrol;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.* ;
import static java.lang.Thread.sleep;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.DefaultCaret;
import jssc.*;

/**
 *
 * @author M.RAOUF
 */
public class MotorControlMainFrame extends javax.swing.JFrame implements Runnable {

    String[] availablePorts;
    SerialPort serialPort;
    boolean motorIsConnected = false;
    boolean motorIsRunning = false;
    int rpm = 50;
    static Thread checkPortThread = null;
    Thread repeatSendThread = new Thread(new SendRepeater());
    
    //static PortReader portReader;
    String connectedPort=null;
    boolean portExist=false;
    
    public MotorControlMainFrame() 
    {
        //load all jframe components      
        initComponents();
        
        Date receiveTime;
        SimpleDateFormat formatterDefault = new SimpleDateFormat("HH:mm:ss");
        try 
        {
            receiveTime = formatterDefault.parse("00:00:00");
        } 
        catch (ParseException ex) 
        {
             
        }
        
        DefaultCaret caret = (DefaultCaret)receivedDataTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        
        /**set default close operation to stop the motor and close the port before closing the program
        **ie. if the user tried to close the program while the motor is running or the port is opened
        **then the motor shall be stopped and the port has to be automatically closed before closing the
        **program
        **/
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent w) {
                disconnectButton.doClick() ;
            }
    });
        /*
        ** after loading the components add direction radio buttons to a certain group 
        ** so the user can only select one option
        */
        motorDirectionRadioButtonGroup.add(clockRadioButton);
        motorDirectionRadioButtonGroup.add(antiClockRadioButton);
        clockRadioButton.setSelected(true);
        
        /*
        ** load the combo box with the available port names        
        */
        loadPortNames();
        
        // change the program icon
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/motorcontrol/img/port.png")));
    }

    /*
    ** read all available coms form the system and load all available COMs to the 
    ** currentPortsComboBox so the user can select one port to connect to
    */
    
    private void loadPortNames() 
    {
        availablePorts = SerialPortList.getPortNames();
        for(int i = 0; i < availablePorts.length; i++)
        {
            // System.out.println(availablePorts[i]);
            currentPortsComboBox.addItem(availablePorts[i]);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        motorDirectionRadioButtonGroup = new javax.swing.ButtonGroup();
        serverClientRadioButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        sendJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sendDataTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        sendClearButton = new javax.swing.JButton();
        repeatSendingCheckBox = new javax.swing.JCheckBox();
        repeatIntervalSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        receiveJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        receivedDataTextArea = new javax.swing.JTextArea();
        showTimeCheckBox = new javax.swing.JCheckBox();
        startLogCheckBox = new javax.swing.JCheckBox();
        receivedTextClearButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        logFileBrowserButton = new javax.swing.JButton();
        showDateCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        speedControlPanel = new javax.swing.JPanel();
        tachometerLabel = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        directionControlPanel = new javax.swing.JPanel();
        clockRadioButton = new javax.swing.JRadioButton();
        antiClockRadioButton = new javax.swing.JRadioButton();
        motorStartButton = new javax.swing.JButton();
        motorStopButton = new javax.swing.JButton();
        wheelLabel = new javax.swing.JLabel();
        motorRpm = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        carControlPanel = new javax.swing.JPanel();
        backwardButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        forwadButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        carStopButton = new javax.swing.JButton();
        headLightButton = new javax.swing.JToggleButton();
        redLightButton = new javax.swing.JToggleButton();
        hornButton = new javax.swing.JButton();
        speedControlPanel1 = new javax.swing.JPanel();
        rcCarTachometerLabel = new javax.swing.JLabel();
        rcCarSpeedSlider = new javax.swing.JSlider();
        mainFrameToolBar = new javax.swing.JToolBar();
        toolBarContainerPanel = new javax.swing.JPanel();
        connectionInfoLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        connectionSettingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        stopBitsComboBox = new javax.swing.JComboBox();
        dataBitsComboBox = new javax.swing.JComboBox();
        parityComboBox = new javax.swing.JComboBox();
        baudRateComboBox = new javax.swing.JComboBox();
        currentPortsComboBox = new javax.swing.JComboBox();
        connectPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        connectionStatusLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        motorControlMainMenuBar = new javax.swing.JMenuBar();
        exitMenuItem = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Control");
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        sendJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Send"));

        sendDataTextArea.setColumns(20);
        sendDataTextArea.setRows(5);
        sendDataTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sendDataTextAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(sendDataTextArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        sendClearButton.setText("Clear");
        sendClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendClearButtonActionPerformed(evt);
            }
        });

        repeatSendingCheckBox.setText("Repeat sending every");
        repeatSendingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatSendingCheckBoxActionPerformed(evt);
            }
        });

        repeatIntervalSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(100)));

        jLabel14.setText("Miliseconds");

        javax.swing.GroupLayout sendJPanelLayout = new javax.swing.GroupLayout(sendJPanel);
        sendJPanel.setLayout(sendJPanelLayout);
        sendJPanelLayout.setHorizontalGroup(
            sendJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(sendJPanelLayout.createSequentialGroup()
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(sendJPanelLayout.createSequentialGroup()
                .addComponent(repeatSendingCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeatIntervalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14))
        );
        sendJPanelLayout.setVerticalGroup(
            sendJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendJPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sendJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(sendClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(sendJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatSendingCheckBox)
                    .addComponent(repeatIntervalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap())
        );

        receiveJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Receive"));

        receivedDataTextArea.setColumns(20);
        receivedDataTextArea.setRows(5);
        receivedDataTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                receivedDataTextAreaCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(receivedDataTextArea);

        showTimeCheckBox.setText("Time");

        startLogCheckBox.setText("Start Log");

        receivedTextClearButton.setText("Clear");
        receivedTextClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivedTextClearButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Log To :");

        logFileBrowserButton.setText("Browse");

        showDateCheckBox.setText("Date");

        javax.swing.GroupLayout receiveJPanelLayout = new javax.swing.GroupLayout(receiveJPanel);
        receiveJPanel.setLayout(receiveJPanelLayout);
        receiveJPanelLayout.setHorizontalGroup(
            receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receiveJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(receiveJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3))
                    .addGroup(receiveJPanelLayout.createSequentialGroup()
                        .addComponent(showDateCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showTimeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startLogCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(receivedTextClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logFileBrowserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jScrollPane2)
        );
        receiveJPanelLayout.setVerticalGroup(
            receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receiveJPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showDateCheckBox)
                    .addComponent(showTimeCheckBox)
                    .addComponent(startLogCheckBox)
                    .addComponent(receivedTextClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(receiveJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logFileBrowserButton)
                    .addComponent(jLabel15))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(receiveJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(sendJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receiveJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Terminal", jPanel4);

        speedControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed Control"));
        speedControlPanel.setLayout(new javax.swing.BoxLayout(speedControlPanel, javax.swing.BoxLayout.LINE_AXIS));

        tachometerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/speedometer.png"))); // NOI18N
        speedControlPanel.add(tachometerLabel);

        speedSlider.setMajorTickSpacing(20);
        speedSlider.setMinorTickSpacing(10);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setSnapToTicks(true);
        speedSlider.setToolTipText("Speed Control");
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });
        speedSlider.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                speedSliderMouseWheelMoved(evt);
            }
        });
        speedControlPanel.add(speedSlider);

        directionControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Direction Control"));

        clockRadioButton.setText("Clockwise");
        clockRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockRadioButtonActionPerformed(evt);
            }
        });

        antiClockRadioButton.setText("Anti Clockwise");
        antiClockRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                antiClockRadioButtonActionPerformed(evt);
            }
        });

        motorStartButton.setText("Start");
        motorStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorStartButtonActionPerformed(evt);
            }
        });

        motorStopButton.setText("Stop");
        motorStopButton.setEnabled(false);
        motorStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorStopButtonActionPerformed(evt);
            }
        });

        wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/wheel.png"))); // NOI18N

        javax.swing.GroupLayout directionControlPanelLayout = new javax.swing.GroupLayout(directionControlPanel);
        directionControlPanel.setLayout(directionControlPanelLayout);
        directionControlPanelLayout.setHorizontalGroup(
            directionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directionControlPanelLayout.createSequentialGroup()
                .addGroup(directionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(antiClockRadioButton)
                    .addComponent(clockRadioButton)
                    .addGroup(directionControlPanelLayout.createSequentialGroup()
                        .addComponent(motorStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(motorStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(wheelLabel)
                .addContainerGap())
        );
        directionControlPanelLayout.setVerticalGroup(
            directionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directionControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clockRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(antiClockRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(directionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(motorStartButton)
                    .addComponent(motorStopButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(directionControlPanelLayout.createSequentialGroup()
                .addComponent(wheelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        motorRpm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        motorRpm.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speedControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(directionControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(motorRpm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(speedControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(directionControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motorRpm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(180, 180, 180))
        );

        jTabbedPane1.addTab("DC-Motor", jPanel3);

        carControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Car Control"));

        backwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/backward.png"))); // NOI18N
        backwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardButtonActionPerformed(evt);
            }
        });

        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/left.png"))); // NOI18N
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        forwadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/forward.png"))); // NOI18N
        forwadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwadButtonActionPerformed(evt);
            }
        });
        forwadButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                forwadButtonKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                forwadButtonKeyTyped(evt);
            }
        });

        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/right.png"))); // NOI18N
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        carStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/stop.png"))); // NOI18N
        carStopButton.setToolTipText("Stop");
        carStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carStopButtonActionPerformed(evt);
            }
        });

        headLightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/headlight.png"))); // NOI18N
        headLightButton.setToolTipText("Headlights");
        headLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headLightButtonActionPerformed(evt);
            }
        });

        redLightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/alert.png"))); // NOI18N
        redLightButton.setToolTipText("Rear Lights");
        redLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redLightButtonActionPerformed(evt);
            }
        });

        hornButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/horn.png"))); // NOI18N
        hornButton.setToolTipText("Horn");
        hornButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hornButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout carControlPanelLayout = new javax.swing.GroupLayout(carControlPanel);
        carControlPanel.setLayout(carControlPanelLayout);
        carControlPanelLayout.setHorizontalGroup(
            carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(carControlPanelLayout.createSequentialGroup()
                .addGroup(carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(carControlPanelLayout.createSequentialGroup()
                        .addComponent(headLightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(forwadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(carControlPanelLayout.createSequentialGroup()
                        .addComponent(hornButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(backwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(carControlPanelLayout.createSequentialGroup()
                        .addComponent(redLightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(carStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        carControlPanelLayout.setVerticalGroup(
            carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, carControlPanelLayout.createSequentialGroup()
                .addGroup(carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forwadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headLightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(carStopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redLightButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(carControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hornButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        speedControlPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed Control"));
        speedControlPanel1.setLayout(new javax.swing.BoxLayout(speedControlPanel1, javax.swing.BoxLayout.LINE_AXIS));

        rcCarTachometerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/speedometer.png"))); // NOI18N
        speedControlPanel1.add(rcCarTachometerLabel);

        rcCarSpeedSlider.setMajorTickSpacing(20);
        rcCarSpeedSlider.setMinorTickSpacing(10);
        rcCarSpeedSlider.setPaintLabels(true);
        rcCarSpeedSlider.setPaintTicks(true);
        rcCarSpeedSlider.setSnapToTicks(true);
        rcCarSpeedSlider.setToolTipText("Speed Control");
        rcCarSpeedSlider.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                rcCarSpeedSliderMouseWheelMoved(evt);
            }
        });
        rcCarSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rcCarSpeedSliderStateChanged(evt);
            }
        });
        speedControlPanel1.add(rcCarSpeedSlider);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(carControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(speedControlPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(carControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedControlPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 181, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RC Car", jPanel1);

        mainFrameToolBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainFrameToolBar.setFloatable(false);
        mainFrameToolBar.setRollover(true);
        mainFrameToolBar.setFocusable(false);

        connectionInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectionInfoLabel.setText("Disconnected");
        connectionInfoLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout toolBarContainerPanelLayout = new javax.swing.GroupLayout(toolBarContainerPanel);
        toolBarContainerPanel.setLayout(toolBarContainerPanelLayout);
        toolBarContainerPanelLayout.setHorizontalGroup(
            toolBarContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarContainerPanelLayout.createSequentialGroup()
                .addComponent(connectionInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addGap(213, 213, 213))
        );
        toolBarContainerPanelLayout.setVerticalGroup(
            toolBarContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectionInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mainFrameToolBar.add(toolBarContainerPanel);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        connectionSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Settings"));

        jLabel1.setText("COM Port:");

        jLabel2.setText("Baud Rate :");

        jLabel4.setText("Parity :");

        jLabel5.setText("Data Bits :");

        jLabel6.setText("Stop Bits :");

        refreshButton.setText("Refresh Ports");
        refreshButton.setToolTipText("Get COM Ports");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        stopBitsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));

        dataBitsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "5", "6", "7", "9" }));
        dataBitsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataBitsComboBoxActionPerformed(evt);
            }
        });

        parityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Odd", "Even", "None", "Mark", "Space" }));

        baudRateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "9600", "300", "600", "1200", "2400", "14400", "19200", "38400", "57600", "115200" }));

        javax.swing.GroupLayout connectionSettingsPanelLayout = new javax.swing.GroupLayout(connectionSettingsPanel);
        connectionSettingsPanel.setLayout(connectionSettingsPanelLayout);
        connectionSettingsPanelLayout.setHorizontalGroup(
            connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionSettingsPanelLayout.createSequentialGroup()
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectionSettingsPanelLayout.createSequentialGroup()
                        .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stopBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baudRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currentPortsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        connectionSettingsPanelLayout.setVerticalGroup(
            connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionSettingsPanelLayout.createSequentialGroup()
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(currentPortsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(baudRateComboBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(parityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dataBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(stopBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        connectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connect"));

        connectButton.setText("Connect");
        connectButton.setToolTipText("Connect To Selected Port");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        connectionStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/disconnected.png"))); // NOI18N
        connectionStatusLabel.setToolTipText("Connection Status");

        javax.swing.GroupLayout connectPanelLayout = new javax.swing.GroupLayout(connectPanel);
        connectPanel.setLayout(connectPanelLayout);
        connectPanelLayout.setHorizontalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(connectionStatusLabel)
                .addContainerGap())
        );
        connectPanelLayout.setVerticalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectionStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disconnectButton))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectionSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(connectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(connectionSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 148, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("COM", jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote Control"));

        jLabel10.setText("IP :");

        jLabel11.setText("Port :");

        jTextField1.setText("IP Address");

        jTextField2.setText("Port Number");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/1425085368_keyboard_layout.png"))); // NOI18N

        jRadioButton3.setText("Web");

        jRadioButton1.setText("Server");

        jRadioButton2.setText("Client");

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Disconnect");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField2))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addGap(14, 14, 14)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel12)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 286, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Remote", jPanel7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 211, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("BlueTooth", jPanel8);

        exitMenuItem.setText("File");

        jMenuItem3.setText("Exit");
        exitMenuItem.add(jMenuItem3);

        motorControlMainMenuBar.add(exitMenuItem);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        motorControlMainMenuBar.add(helpMenu);

        setJMenuBar(motorControlMainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(mainFrameToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jTabbedPane2))
                .addGap(6, 6, 6)
                .addComponent(mainFrameToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //this method receives a string and writes it to the connected port
    private void sendData(String dataToSend) 
    {
        try
        {
            // but wait.. we should never send anything unless the connection is opened
            // so we have to check if it is connected
            if(motorIsConnected)
            {
                serialPort.writeBytes(dataToSend.getBytes());//Write data to port
            }
            else 
            {
                JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Port is not connected",
                                                "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (SerialPortException  ex)
        {
            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Cannot Write Data To Port",
                                            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
       
    private void readPort()
    {
        try
        {
            int mask = SerialPort.MASK_RXCHAR + SerialPort.MASK_CTS + SerialPort.MASK_DSR;//Prepare mask
                serialPort.setEventsMask(mask);//Set mask
                serialPort.addEventListener(new  SerialPortEventListener() {
                @Override
                public void serialEvent(SerialPortEvent event) 
                {
                    String oldString;
                    if(event.isRXCHAR() && event.getEventValue() > 0) 
                    {
                        try 
                        {   
                            String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new java.util.Date());
                            oldString = receivedDataTextArea.getText();
                            if(showTimeCheckBox.isSelected())
                            {
                                receivedDataTextArea.setText( oldString+timeStamp+" : "+serialPort.readString(event.getEventValue()));
                                //System.out.println("Received response from port: " + receivedData);
                            }
                            else
                            {
                                receivedDataTextArea.setText( oldString+serialPort.readString(event.getEventValue()));
                            }
                        }
                        catch (SerialPortException ex) 
                        {
                            //System.out.println("Error in receiving response from port: " + ex);
                            //System.out.println(ex);
                        }
                    }
                    else if(event.isCTS())
                    {//If CTS line has changed state
                        if(event.getEventValue() == 1)
                        {//If line is ON
                            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "CTS - ON",
                                                 "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else 
                        {
                            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "CTS - OFF",
                                                 "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    else if(event.isDSR())
                    {///If DSR line has changed state
                        if(event.getEventValue() == 1)
                        {//If line is ON
                            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "DSR - ON",
                                                 "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        else 
                        {
                            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "DSR - OFF",
                                                 "Error", JOptionPane.ERROR_MESSAGE);                        
                        }
                    }   
                }
            });//Add SerialPortEventListener
        }
        catch(Exception ex)
        {
            
        }
    }
    
    private void disconnect() throws HeadlessException {
        // TODO add your handling code here:
        try
        {
            serialPort.closePort();//Close serial port
            //update port connection state
            motorIsConnected = false;
            //re-enable all connection setting controls
            enableDisable(true);
            //re-enable disconnect button
            disconnectButton.setEnabled(false);
            //update the coonection status image
            connectionStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/disconnected.png")));
            //update the coonection status label
            connectionInfoLabel.setText("Disconnected");
            
            //stop the thread that checks for the port existence as long as the connection is intentionally closed
            checkPortThread.stop();            
        }
        catch (SerialPortException  ex)
        {
            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Cannot close port",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //this method is used to enable or disable the connection setting controls
    private void enableDisable(boolean en) 
    {
        connectButton.setEnabled(en);
        currentPortsComboBox.setEnabled(en);
        baudRateComboBox.setEnabled(en);
        dataBitsComboBox.setEnabled(en);
        stopBitsComboBox.setEnabled(en);
        parityComboBox.setEnabled(en);
        refreshButton.setEnabled(en);
    }
    
    private void sendInteger(int integerToSend) 
    {
        sendData("P");
        try
        {            
            serialPort.writeInt(integerToSend);
        }
        catch (SerialPortException  ex)
        {
             JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Error Unable To Send Data!!",
                                             "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
       
    }//GEN-LAST:event_formKeyPressed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "At start,\n     ClockWise sends : C\n     AntiClockWise sends : N\nStop sends : S\nSlider value is sent as integer in range 0-100","Help",1);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Motor Control,Java Course project\nBy Embedded Systems Track Ismailia Branch InTake'35\n\nTeam members:\n    Ahmed Ayman\n    Aisha AbdElmagid\n    Kholoud Mosa\n    Mohamed Abdallah\n    Mohamed AbdElraouf","About",1);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed

        //if the user tried to disconnect the device the motor has to be stopped if it was at running state
        if(motorIsRunning)
        {
            sendData("S");
            //update motor state
            motorIsRunning=false;
            motorStopButton.doClick();
        }

        disconnect();
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        connectedPort=currentPortsComboBox.getSelectedItem().toString();

        //create new COM with the selected port
        serialPort = new SerialPort(connectedPort);

        try
        {
            serialPort.openPort();

            //change the connected COM parameters
            serialPort.setParams(Integer.parseInt(baudRateComboBox.getSelectedItem().toString()),
                Integer.parseInt(dataBitsComboBox.getSelectedItem().toString()),
                Integer.parseInt(stopBitsComboBox.getSelectedItem().toString()),
                parityComboBox.getSelectedIndex());
            //now the port is opened and the motor is connected
            motorIsConnected = true;

            readPort();

            //start a thread to continously check if the port is connected
            //this is to fire a dialog box if the user removed the device while the port is connected
            checkPortThread = new Thread(this);
            checkPortThread.start();
            //portReader = new PortReader(serialPort);

            //disable all connection setting controls
            enableDisable(false);

            //enable connection disconnect button
            disconnectButton.setEnabled(true);

            //change connection status image
            connectionStatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/connected.png")));

            //update the connection status text
            connectionInfoLabel.setText("Connected to  : " + currentPortsComboBox.getSelectedItem().toString() + " @ " +baudRateComboBox.getSelectedItem() + " Bits/Sec");
        }
        catch (SerialPortException  ex)
        {
            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Cannot Open Selected Port \n Please Select Another Port",
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void dataBitsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataBitsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataBitsComboBoxActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        availablePorts = SerialPortList.getPortNames();
        currentPortsComboBox.removeAllItems();
        for(int i = 0; i < availablePorts.length; i++)
        {
           // System.out.println(availablePorts[i]);
            currentPortsComboBox.addItem(availablePorts[i]);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void rcCarSpeedSliderMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_rcCarSpeedSliderMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_rcCarSpeedSliderMouseWheelMoved

    private void rcCarSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rcCarSpeedSliderStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rcCarSpeedSliderStateChanged

    private void hornButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hornButtonActionPerformed
        sendData("O");
    }//GEN-LAST:event_hornButtonActionPerformed

    private void redLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redLightButtonActionPerformed
        sendData("Z");
    }//GEN-LAST:event_redLightButtonActionPerformed

    private void headLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headLightButtonActionPerformed
        sendData("H");
    }//GEN-LAST:event_headLightButtonActionPerformed

    private void carStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carStopButtonActionPerformed
        sendData("S");
    }//GEN-LAST:event_carStopButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        sendData("R");
    }//GEN-LAST:event_rightButtonActionPerformed

    private void forwadButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_forwadButtonKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_forwadButtonKeyTyped

    private void forwadButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_forwadButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_forwadButtonKeyPressed

    private void forwadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwadButtonActionPerformed
        sendData("F");
    }//GEN-LAST:event_forwadButtonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        sendData("L");
    }//GEN-LAST:event_leftButtonActionPerformed

    private void backwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardButtonActionPerformed
        sendData("B");
    }//GEN-LAST:event_backwardButtonActionPerformed

    private void motorStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorStopButtonActionPerformed

        motorStopButton.setEnabled(false);
        motorStartButton.setEnabled(true);
        antiClockRadioButton.setEnabled(true);
        clockRadioButton.setEnabled(true);
        sendData("S"); // send 'S' to stop motor
        motorRpm.setText("motor stopped");
        motorIsRunning=false; // update motor state
        //update direction image
        wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/wheel.png")));

    }//GEN-LAST:event_motorStopButtonActionPerformed

    private void motorStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorStartButtonActionPerformed

        rpm = (int)speedSlider.getValue();

        // do nothing if the
        if(motorIsConnected)
        {
            if(clockRadioButton.isSelected() == true )
            {
                //send the initial value to adjust the motor starting speed
                sendInteger(rpm);
                sendData("C"); // send 'C' to set motor direction to clockwise direction prior to user choice
                //update the wheel image to indicate the direction of rotation
                wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/clockWise.png")));
            }
            else if (antiClockRadioButton.isSelected() == true)
            {
                //send the initial value to adjust the motor starting speed
                sendInteger(rpm);
                sendData("N");// send 'N' to set motor direction to anti-clockwise direction prior to user choice
                //update the wheel image to indicate the direction of rotation
                wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/antiClockWise.png")));
            }
            //update the motor running state
            motorIsRunning=true;
            motorStopButton.setEnabled(true);
            motorStartButton.setEnabled(false);
            antiClockRadioButton.setEnabled(false);
            clockRadioButton.setEnabled(false);
            //update the motor rpm value
            motorRpm.setText("motor is running @ "+Integer.toString(rpm*24)+" rpm");
        }
        else
        {
            JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Port Is Not Connected",
                "Inane error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_motorStartButtonActionPerformed

    private void antiClockRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_antiClockRadioButtonActionPerformed
        //update directin image
        wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/antiClockWise.png")));
    }//GEN-LAST:event_antiClockRadioButtonActionPerformed

    private void clockRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockRadioButtonActionPerformed
        wheelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/clockWise.png")));
    }//GEN-LAST:event_clockRadioButtonActionPerformed

    private void speedSliderMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_speedSliderMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0)
        {
            //increment slider value for mouse wheel up
            speedSlider.setValue(speedSlider.getValue() + 10);
        }
        else if (notches > 0)
        {
            //decrement slider value for mouse wheel down
            speedSlider.setValue(speedSlider.getValue() - 10);
        }
    }//GEN-LAST:event_speedSliderMouseWheelMoved

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        if(!speedSlider.getValueIsAdjusting())
        {
            rpm = (int)speedSlider.getValue();
            if(motorIsConnected && motorIsRunning)
            {
                sendInteger(rpm);
                motorRpm.setText("motor is running @ "+Integer.toString(rpm*24)+" rpm");
            }
            else
            {
                // JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Port Is Not Connected", "Error", JOptionPane.ERROR_MESSAGE);
            }

            tachometerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/motorcontrol/img/s"+ Integer.toString(rpm) + ".png")));

        }
    }//GEN-LAST:event_speedSliderStateChanged

    private void receivedTextClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedTextClearButtonActionPerformed
        receivedDataTextArea.setText("");
    }//GEN-LAST:event_receivedTextClearButtonActionPerformed

    private void receivedDataTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_receivedDataTextAreaCaretUpdate

    }//GEN-LAST:event_receivedDataTextAreaCaretUpdate

    private void repeatSendingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatSendingCheckBoxActionPerformed

        if(repeatSendingCheckBox.isSelected())
        {
            if (motorIsConnected)
            {
                repeatSendThread = new Thread(new Runnable(){

                    @Override
                    public void run()
                    {
                        while(true)
                        {
                            try
                            {
                                sendData(sendDataTextArea.getText());
                                Thread.sleep(Integer.parseInt(repeatIntervalSpinner.getValue().toString()));
                            }
                            catch (InterruptedException ex)
                            {
                                Logger.getLogger(MotorControlMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });
                repeatSendThread.start();
            }
            else
            {
                JOptionPane.showMessageDialog(MotorControlMainFrame.this, "Port is not connected!!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            repeatSendThread.stop();
        }
    }//GEN-LAST:event_repeatSendingCheckBoxActionPerformed

    private void sendClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendClearButtonActionPerformed
        sendDataTextArea.setText("");
    }//GEN-LAST:event_sendClearButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendData(sendDataTextArea.getText());
    }//GEN-LAST:event_sendButtonActionPerformed

    private void sendDataTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sendDataTextAreaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            evt.consume();
            sendButton.doClick();
        }
    }//GEN-LAST:event_sendDataTextAreaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MotorControlMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MotorControlMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MotorControlMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MotorControlMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            @Override
            public void run()
            {
                new MotorControlMainFrame().setVisible(true);                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JRadioButton antiClockRadioButton;
    private javax.swing.JButton backwardButton;
    private javax.swing.JComboBox baudRateComboBox;
    private javax.swing.JPanel carControlPanel;
    private javax.swing.JButton carStopButton;
    private javax.swing.JRadioButton clockRadioButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel connectPanel;
    private javax.swing.JLabel connectionInfoLabel;
    private javax.swing.JPanel connectionSettingsPanel;
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JComboBox currentPortsComboBox;
    private javax.swing.JComboBox dataBitsComboBox;
    private javax.swing.JPanel directionControlPanel;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JMenu exitMenuItem;
    private javax.swing.JButton forwadButton;
    private javax.swing.JToggleButton headLightButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JButton hornButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton leftButton;
    private javax.swing.JButton logFileBrowserButton;
    private javax.swing.JToolBar mainFrameToolBar;
    private javax.swing.JMenuBar motorControlMainMenuBar;
    private javax.swing.ButtonGroup motorDirectionRadioButtonGroup;
    private javax.swing.JLabel motorRpm;
    private javax.swing.JButton motorStartButton;
    private javax.swing.JButton motorStopButton;
    private javax.swing.JComboBox parityComboBox;
    private javax.swing.JSlider rcCarSpeedSlider;
    private javax.swing.JLabel rcCarTachometerLabel;
    private javax.swing.JPanel receiveJPanel;
    private javax.swing.JTextArea receivedDataTextArea;
    private javax.swing.JButton receivedTextClearButton;
    private javax.swing.JToggleButton redLightButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JSpinner repeatIntervalSpinner;
    private javax.swing.JCheckBox repeatSendingCheckBox;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sendClearButton;
    private javax.swing.JTextArea sendDataTextArea;
    private javax.swing.JPanel sendJPanel;
    private javax.swing.ButtonGroup serverClientRadioButtonGroup;
    private javax.swing.JCheckBox showDateCheckBox;
    private javax.swing.JCheckBox showTimeCheckBox;
    private javax.swing.JPanel speedControlPanel;
    private javax.swing.JPanel speedControlPanel1;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JCheckBox startLogCheckBox;
    private javax.swing.JComboBox stopBitsComboBox;
    private javax.swing.JLabel tachometerLabel;
    private javax.swing.JPanel toolBarContainerPanel;
    private javax.swing.JLabel wheelLabel;
    // End of variables declaration//GEN-END:variables

    // check for the port existence
    private void checkAllPortNames() 
    {
        availablePorts = SerialPortList.getPortNames();
        for (String availablePort : availablePorts) 
        {
            if (availablePort.equals(connectedPort)) 
            {
                //if the port matches the connected port so it exists
                portExist=true;
                //break after the port is found
                break;
            }
        }
    }
    //override run method of the 
    @Override
    public void run() 
    {                                         
        while(true)
        {            
            //check for the connected port existence and notify the user about port disonnection
            try
            {
                portExist=false; 
                checkAllPortNames(); // check for the port existence
                if(!portExist) // if the port doesn't exist
                {                    
                    int choice = JOptionPane.showConfirmDialog(MotorControlMainFrame.this,"Device disconnected, do you want to connect on other port?") ;
                    if (choice==JOptionPane.YES_OPTION || choice==JOptionPane.CANCEL_OPTION) 
                    {                        
                        //if user choose yes close the port 
                        currentPortsComboBox.removeAllItems();            
                        loadPortNames();
                        
                        if(motorIsRunning)
                        {
                            //if the motor was at running state so we have to re-enable controls to the default state
                            motorStopButton.doClick();
                            //update motor state
                            motorIsRunning=false;
                        }
                        //close the port and re-enable controls
                        disconnect();
                    } 
                    else if (choice == JOptionPane.NO_OPTION) 
                    {
                        // if user choose NO close the program 
                        disconnect();
                        System.exit(0);
                    } 
                }
            }
            catch(Exception e)
            {
                
            }
            //serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN | SerialPort.FLOWCONTROL_RTSCTS_OUT);            
            //serialPort.addEventListener(portReader, SerialPort.MASK_RXCHAR);            
        }
    }
        //while(motorIsConnected)    receivedDataLabel.setText(portReader.receivedData);
    class SendRepeater implements Runnable
    {
        @Override
        public void run() 
        {
            while(true)
            {
                try 
                {                    
                    sendData(sendDataTextArea.getText());    
                    Thread.sleep(500);
                } 
                catch (InterruptedException ex) 
                {
                    Logger.getLogger(MotorControlMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }        
    }
}
